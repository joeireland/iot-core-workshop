P.now("reviewsLightbox-js").execute(function(lightboxJS){if(lightboxJS==undefined){P.when("A","jQuery","ready").execute("reviews-lightbox-load",function(A){ReviewsLightboxGlobalModel=function(){this.applicationResources=undefined;
A.$(this).bind("fetchApplicationResourcesSuccess",this,this._fetchApplicationResourcesSuccess);
A.$(this).bind("fetchApplicationResourcesError",this,this._fetchApplicationResourcesError);
new AjaxRequest("/gp/customer-reviews/aj/private/reviewsGallery/get-application-resources-for-reviews-gallery",{},this,"fetchApplicationResources",10000,8);
};
ReviewsLightboxGlobalModel.prototype.getCustomerInfo=function(){return this.applicationResources.customerInfo;
};
ReviewsLightboxGlobalModel.prototype.getString=function(key){return this.applicationResources.strings[key];
};
ReviewsLightboxGlobalModel.prototype.getTemplate=function(templateName){return this.applicationResources.templates[templateName];
};
ReviewsLightboxGlobalModel.prototype._fetchApplicationResourcesSuccess=function(event,data){var myself=event.data;
myself.applicationResources=data;
try{window.P.register("reviewsLightbox-globalModel",function(){});
}catch(e){}};
ReviewsLightboxGlobalModel.prototype._fetchApplicationResourcesError=function(event,data){new LogMetricsRequest({"ReviewsLightBox:ErrorFetchingTemplates":1});
};
ReviewsLightboxGlobalModel.prototype.logMetrics=function(metricsHash){new AjaxRequestNoReply("/gp/customer-reviews/aj/metrics/log-values",metricsHash);
};
ReviewsLightboxGlobalModel.prototype.replaceStringPlaceholders=function(stringToReplace,placeholderValues){for(var key in placeholderValues){var stringToFind="{{ "+key+" }}";
while(stringToReplace.indexOf(stringToFind)!==-1){stringToReplace=stringToReplace.replace(stringToFind,placeholderValues[key]);
}}return stringToReplace;
};
if(!Object.create){Object.create=function(o){if(arguments.length>1){throw new Error("Object.create implementation only accepts the first parameter.");
}function F(){}F.prototype=o;
return new F();
};
}ReviewsLightboxModel=function(){this.asin=undefined;
this.reviewID=undefined;
this.imageData=[];
};
ReviewGallery=function(name,templateStyle){this.applicationModel=new ReviewsLightboxModel();
this._widgetName=name;
this._applicationView=A.$(this._applicationViewTemplate);
this._templateStyle=templateStyle;
this.dataFetcher=new GalleryDataFetcher(this.applicationModel);
A.$(this.dataFetcher).bind("dataFetchCallback",this,this._galleryDataFetchCallback);
};
ReviewGallery.prototype.render=function(){if(!this.viewRendered){this.viewRendered=true;
this._containerView=A.$("body").find("#"+this._widgetName);
this._containerView.append(this._applicationView);
this._immersiveViewController=undefined;
this._setupImmersiveView(this._templateStyle);
if(this._templateStyle==="DESKTOP"){this.removeImmersiveViewHideButton();
}}};
ReviewGallery.prototype.initializeForReview=function(reviewID){this.applicationModel.reviewID=reviewID;
this.dataFetcher.startFetchingData();
};
ReviewGallery.prototype._setupImmersiveView=function(templateStyle){this._immersiveViewContainerDom=this._containerView.find(".immersiveViewContainer");
this._immersiveViewController=new ImmersiveViewController(this._immersiveViewContainerDom,this.applicationModel,templateStyle);
A.$(this._immersiveViewController).bind("hideImmersiveViewClicked",this,this._hideImmersiveViewClicked);
};
ReviewGallery.prototype._galleryDataFetchCallback=function(event,data){var myself=event.data;
if(myself._immersiveViewController){myself._immersiveViewController.refresh();
}try{if(!myself.alreadyRegistedReadyEvent){myself.alreadyRegistedReadyEvent=true;
window.P.register("reviewsLightbox-ready-"+myself._widgetName,function(){return{};
});
}}catch(e){new LogMetricsRequest({"ReviewsGallery:AlreadyRegisteredFailure":1});
}};
ReviewGallery.prototype._hideImmersiveViewClicked=function(event){var myself=event.data;
A.$(myself).trigger("hideImmersiveViewClicked");
if(myself.templateStyle!=="DESKTOP"){myself.unbindBrowserBack();
}};
ReviewGallery.prototype.removeImmersiveViewHideButton=function(){this._immersiveViewController.removeImmersiveViewHideButton();
};
ReviewGallery.prototype.showImageAtIndex=function(index){new LogMetricsRequest({"ReviewsLightBox:DP:Tiles:ThumnailClicked":1});
this._immersiveViewController.prepareViewForImageAtIndex(index);
if(this._templateStyle!=="DESKTOP"){this.bindBrowserBack();
}};
ReviewGallery.prototype.GALLERY_HASH="#GALLERY";
ReviewGallery.prototype.bindBrowserBack=function(){if(history&&history.pushState){history.pushState({},"",window.location+this.GALLERY_HASH);
var myself=this;
A.$(window).bind("hashchange",function(){A.$(myself).trigger("hideImmersiveViewClicked");
myself.unbindBrowserBack();
});
}};
ReviewGallery.prototype.unbindBrowserBack=function(){A.$(window).unbind("hashchange");
if(window.location.hash.indexOf(this.GALLERY_HASH)!=-1&&history&&history.back){history.back();
}};
ReviewsLightbox=function(name,templateStyle){this.applicationModel=new ReviewsLightboxModel();
this._containerView=A.$("#"+name);
this._applicationView=A.$(this._applicationViewTemplate);
this._containerView.append(this._applicationView);
this.thumbnailViewController=undefined;
this.immersiveViewController=undefined;
this._lightboxName=name;
this.dataFetcher=new GalleryDataFetcher(this.applicationModel);
A.$(this.dataFetcher).bind("dataFetchCallback",this,this._galleryDataFetchCallback);
A.$(this.dataFetcher).bind("dataFetchCompleteCallback",this,this._galleryDataFetchCompleteCallback);
var myself=this;
A.$("#"+name).bind("jumpToImageAtIndex",function(event,index){new LogMetricsRequest({"ReviewsLightBox:DP:Widget:ThumnailClicked":1});
myself._jumpToImageAtIndex(index);
});
A.$("#"+name).bind("hideImmersiveView",function(){new LogMetricsRequest({"ReviewsLightBox:DP:Widget:SeeAllClicked":1});
myself._hideImmersiveView();
});
this._setupGalleryView();
this._setupImmersiveView(templateStyle);
this._lastScrolledPositionSansImmersiveView=0;
};
ReviewsLightbox.prototype.initializeForAsin=function(asin){this.applicationModel.asin=asin;
this.dataFetcher.startFetchingData();
};
ReviewsLightbox.prototype.initializeForCustomer=function(customerID){this.applicationModel.customerID=customerID;
this.dataFetcher.startFetchingData();
};
ReviewsLightbox.prototype._setupGalleryView=function(){this.imageGalleryDom=this._containerView.find(".compositeThumbnailContentView");
this.thumbnailViewController=new CompositeThumbnailViewController(this.imageGalleryDom,this.applicationModel);
A.$(this.thumbnailViewController).bind("thumbnailClicked",this,this._thumbnailClicked);
};
ReviewsLightbox.prototype._setupImmersiveView=function(templateStyle){this.immersiveViewContainerDom=this._containerView.find(".immersiveViewContainer");
this.immersiveViewController=new ImmersiveViewController(this.immersiveViewContainerDom,this.applicationModel,templateStyle);
A.$(this.immersiveViewController).bind("hideImmersiveViewClicked",this,this._hideImmersiveViewClicked);
};
ReviewsLightbox.prototype._jumpToImageAtIndex=function(index){this.immersiveViewController.prepareViewForImageAtIndex(index);
this._showImmersiveView();
};
ReviewsLightbox.prototype._thumbnailClicked=function(event,data){var myself=event.data;
myself.immersiveViewController.prepareViewForImageAtIndex(data);
myself._showImmersiveView();
};
ReviewsLightbox.prototype._hideImmersiveViewClicked=function(event){var myself=event.data;
myself._hideImmersiveView();
};
ReviewsLightbox.prototype._showImmersiveView=function(){this.imageGalleryDom=this._containerView.find(".compositeThumbnailContentView");
this.thumbnailViewController.hide();
this.immersiveViewController.show();
};
ReviewsLightbox.prototype._hideImmersiveView=function(){this.thumbnailViewController.show();
this.immersiveViewController.hide();
};
ReviewsLightbox.prototype._galleryDataFetchCallback=function(event,data){var myself=event.data;
var images=data.images;
var loadingSection=myself._containerView.find(".loadingSection");
loadingSection.addClass("hidden");
if(!data.images||(data.images&&data.images.length===0)){return;
}myself.thumbnailViewController.addThumbnailsForImages(images);
try{if(!myself.alreadyRegistedReadyEvent){myself.alreadyRegistedReadyEvent=true;
window.P.register("reviewsLightbox-ready-"+myself._lightboxName,function(){return{};
});
}}catch(e){new LogMetricsRequest({"ReviewsGallery:AlreadyRegisteredFailure":1});
}};
ReviewsLightbox.prototype._galleryDataFetchCompleteCallback=function(event,data){var myself=event.data;
if(myself.applicationModel.imageData.length==0){var imagesNotFoundSpanElement=myself._containerView.find(".noCustomerImagesText");
var globalModel=window.reviewsLightboxGlobalModel;
imagesNotFoundSpanElement.html(globalModel.getString("noCustomerImagesFound"));
myself._containerView.find(".noCustomerImagesBanner").show();
}};
ReviewsLightboxEmbedded=function ReviewsLightboxEmbedded(name,templateStyle){ReviewsLightbox.call(this,name,templateStyle);
};
ReviewsLightboxEmbedded.prototype=Object.create(ReviewsLightbox.prototype);
ReviewsLightboxEmbedded.prototype._showImmersiveView=function(){this.immersiveViewController.show();
};
ReviewsLightboxEmbedded.prototype._hideImmersiveView=function(){this.immersiveViewController.hide();
};
ReviewsLightboxEmbedded.prototype._setupImmersiveView=function(templateStyle){this.immersiveViewController=new ImmersiveViewControllerStandAlone(this.applicationModel,templateStyle);
};
CustomerProfileLightbox=function CustomerProfileLightbox(name,templateStyle){ReviewsLightbox.call(this,name,templateStyle);
};
CustomerProfileLightbox.prototype=Object.create(ReviewsLightbox.prototype);
CustomerProfileLightbox.prototype.initializeForCustomer=function(customerID){this.applicationModel.customerID=customerID;
this.dataFetcher.startFetchingData();
};
ImmersiveViewController=function(parentViewDom,applicationModel,templateStyle){this._applicationModel=applicationModel;
this._globalModel=window.reviewsLightboxGlobalModel;
this._parentViewDom=parentViewDom;
this._view=new ImmersiveView(applicationModel,templateStyle);
this._parentViewDom.append(this._view.viewDom);
this._currentElementIndex=0;
A.$(this._view).bind("backButtonClicked",this,this._backButtonClicked);
A.$(this._view).bind("nextButtonClicked",this,this._nextButtonClicked);
A.$(this._view).bind("hideButtonClicked",this,this._hideClicked);
A.$(this._view).bind("moveToImageAtOffset",this,this._moveToImageAtOffset);
A.$(this._view).bind("castHelpfulVote",this,this._castHelpfulVote);
A.$(this._view).bind("castNotHelpfulVote",this,this._castNotHelpfulVote);
A.$(this).bind("castVoteSuccess",this,this._castVoteSuccess);
A.$(this).bind("castVoteError",this,this._castVoteError);
this.reviewsWithSuccessfulVoteCasts={};
};
ImmersiveViewController.prototype.refresh=function(){this._updateViewWithReviewAtIndex(this._currentElementIndex);
this._updateNavigationButtons();
};
ImmersiveViewController.prototype.removeImmersiveViewHideButton=function(){this._view.removeImmersiveViewHideButton();
};
ImmersiveViewController.prototype.prepareViewForImageAtIndex=function(index){this._currentElementIndex=index;
this._updateViewWithReviewAtIndex(index);
};
ImmersiveViewController.prototype.hide=function(){this._parentViewDom.hide();
};
ImmersiveViewController.prototype.show=function(){this._parentViewDom.show();
};
ImmersiveViewController.prototype._moveToImageAtOffset=function(event,data){var myself=event.data;
var index=data;
myself._currentElementIndex=index;
myself._updateViewWithReviewAtIndex(index);
myself._updateNavigationButtons();
};
ImmersiveViewController.prototype._backButtonClicked=function(event){var myself=event.data;
myself._currentElementIndex--;
if(myself._currentElementIndex<0){myself._currentElementIndex=0;
}else{myself._updateViewWithReviewAtIndex(myself._currentElementIndex);
}myself._updateNavigationButtons();
};
ImmersiveViewController.prototype._nextButtonClicked=function(event){var myself=event.data;
myself._currentElementIndex++;
if(myself._currentElementIndex>=myself._applicationModel.imageData.length){myself._currentElementIndex=myself._applicationModel.imageData.length-1;
}else{myself._updateViewWithReviewAtIndex(myself._currentElementIndex);
}myself._updateNavigationButtons();
};
ImmersiveViewController.prototype._hideClicked=function(event){var myself=event.data;
A.$(myself).trigger("hideImmersiveViewClicked");
};
ImmersiveViewController.prototype._updateNavigationButtons=function(){if(this._currentElementIndex==0){this._view.hideBackButton();
}else{this._view.showBackButton();
}if(this._currentElementIndex==(this._applicationModel.imageData.length-1)){this._view.hideNextButton();
}else{this._view.showNextButton();
}};
ImmersiveViewController.prototype._updateViewWithReviewAtIndex=function(index){var imageData=this._applicationModel.imageData[index];
if(!imageData){return;
}if(imageData.associatedReview){var imagesInSelectedReview=this._fetchAllImagesForReviewAtOffset(index);
var disableVotingButtons=false;
var customerInfo=this._globalModel.getCustomerInfo();
if(this.reviewsWithSuccessfulVoteCasts[imageData.associatedReview.reviewId]){disableVotingButtons=true;
}else{if(imageData.associatedReview.author.customerId===customerInfo.customerID){disableVotingButtons=true;
}}this._view.updateImageWithAssociatedReview(imageData.associatedReview,imageData.largeImage,imagesInSelectedReview,disableVotingButtons);
}else{this._view.updateImageWithAssociatedLegacyImageInfo(imageData.legacyImageInfo,imageData.largeImage);
}this._updateNavigationButtons();
};
ImmersiveViewController.prototype._fetchAllImagesForReviewAtOffset=function(offset){var currentImage=this._applicationModel.imageData[offset];
var numberOfImages=this._applicationModel.imageData.length;
var imagesInSelectedReview=[];
for(var c=0;
c<numberOfImages;
c++){var image=this._applicationModel.imageData[c];
if(image.associatedReview&&image.associatedReview.reviewId===currentImage.associatedReview.reviewId){imagesInSelectedReview.push({thumbnail:image.smallImage,shouldHighlight:(c===offset)?true:false,index:c});
}}return imagesInSelectedReview;
};
ImmersiveViewController.prototype._castHelpfulVote=function(event){var myself=event.data;
var currentImageData=this._applicationModel.imageData[myself._currentElementIndex];
if(!myself._globalModel.getCustomerInfo().customerID){window.location.replace(currentImageData.votingLinks.helpful);
return;
}new AjaxRequest(currentImageData.votingLinks.helpful,{},myself,"castVote",3000,3);
myself._view.hideVotingButtons();
myself._view.showMessageForVoteInProcess();
};
ImmersiveViewController.prototype._castNotHelpfulVote=function(event){var myself=event.data;
var currentImageData=myself._applicationModel.imageData[myself._currentElementIndex];
if(!myself._globalModel.getCustomerInfo().customerID){window.location.replace(currentImageData.votingLinks.helpful);
return;
}new AjaxRequest(currentImageData.votingLinks.notHelful,{},myself,"castVote",3000,3);
};
ImmersiveViewController.prototype._castVoteSuccess=function(event){this._view.hideMessageForVoteInProcess();
this._view.showMessageForSuccessfulVoteCast();
var currentImageData=myself._applicationModel.imageData[myself._currentElementIndex];
myself.reviewsWithSuccessfulVoteCasts[currentImageData.associatedReview.reviewId]=1;
};
ImmersiveViewController.prototype._castVoteError=function(event){this._view.hideMessageForVoteInProcess();
this._view.showMessageForErrorDuringVoteCast();
this._view.showVotingButtons();
new LogMetricsRequest({"ReviewsLightBox:VoteCastError":1});
};
ImmersiveViewControllerStandAlone=function(applicationModel,templateStyle){this._applicationModel=applicationModel;
this._globalModel=window.reviewsLightboxGlobalModel;
this._view=new ImmersiveView(applicationModel,templateStyle);
this._currentElementIndex=0;
A.$(this._view).bind("backButtonClicked",this,this._backButtonClicked);
A.$(this._view).bind("nextButtonClicked",this,this._nextButtonClicked);
A.$(this._view).bind("hideButtonClicked",this,this._hideClicked);
A.$(this._view).bind("moveToImageAtOffset",this,this._moveToImageAtOffset);
A.$(this._view).bind("castHelpfulVote",this,this._castHelpfulVote);
A.$(this._view).bind("castNotHelpfulVote",this,this._castNotHelpfulVote);
A.$(this).bind("castVoteSuccess",this,this._castVoteSuccess);
A.$(this).bind("castVoteError",this,this._castVoteError);
this.reviewsWithSuccessfulVoteCasts={};
this.modal=undefined;
var myself=this;
P.when("a-modal").execute(function(modal){var popoverTemplate='<div class="reviewLightboxPopoverContainer"><div class="reviewsLightbox"></div></div>';
myself.modal=modal.create(A.$("<div></div>"),{"content":popoverTemplate});
var content=myself.modal.refresh().getContent().find(".reviewsLightbox");
content.append(myself._view.viewDom);
});
this._view.removeImmersiveViewHideButton();
};
ImmersiveViewControllerStandAlone.prototype=Object.create(ImmersiveViewController.prototype);
ImmersiveViewControllerStandAlone.prototype.hide=function(){};
ImmersiveViewControllerStandAlone.prototype.show=function(){this.modal.show();
};
ImmersiveView=function(applicationModel,templateStyle){this._applicationModel=applicationModel;
this._templateStyle=templateStyle;
this._globalModel=window.reviewsLightboxGlobalModel;
this.viewDom=undefined;
this._renderView();
this._addBindingsForButtons();
this._isImageInformationPanelExpanded=false;
};
ImmersiveView.prototype._renderView=function(){var templateData={"hideButtonText":(this._templateStyle==="DESKTOP")?this._globalModel.getString("viewImageGallery"):this._globalModel.getString("back")};
var templateToRender=(this._templateStyle==="DESKTOP")?this._immersiveView:this._immersiveViewForMobile;
this.viewDom=A.$(this._globalModel.replaceStringPlaceholders(templateToRender,templateData));
if(this._templateStyle==="MOBILE"){this.viewDom.bind("touchmove",function(e){if(e.target&&e.target.className&&e.target.className==="reviewText"){return;
}e.preventDefault();
});
}var imageView=this.viewDom.find(".imageElement");
var myself=this;
imageView.load(function(){A.$(this).css({"width":"auto","height":"auto"});
var containerDom=myself.viewDom.find(".imageView");
var aspectRatioOfContainer=containerDom.width()/containerDom.height();
if(this.width/this.height>=aspectRatioOfContainer){A.$(this).css({"width":"inherit","height":"auto"});
}else{A.$(this).css({"width":"auto","height":"inherit"});
}});
};
ImmersiveView.prototype.removeImmersiveViewHideButton=function(){if(this._templateStyle==="MOBILE"){var hideButton=this.viewDom.find(".hideButton");
hideButton.hide();
}else{var immmersiveViewMainContent=this.viewDom.find(".immersiveViewMainContent");
immmersiveViewMainContent.css({"padding-top":"0px"});
}};
ImmersiveView.prototype._addBindingsForButtons=function(){var hideButton=this.viewDom.find(".hideButton");
var backButtonContainer=this.viewDom.find(".backButtonContainer");
var nextButtonContainer=this.viewDom.find(".nextButtonContainer");
var myself=this;
A.$(backButtonContainer).bind("click",function(){A.$(myself).trigger("backButtonClicked");
});
A.$(nextButtonContainer).bind("click",function(){A.$(myself).trigger("nextButtonClicked");
});
A.$(hideButton).bind("click",function(){A.$(myself).trigger("hideButtonClicked");
});
if(this._templateStyle==="DESKTOP"){var imageView=this.viewDom.find(".imageViewContainer");
A.$(imageView).bind("mouseleave",this,this._mouseMovedOutOfImmersiveView);
A.$(imageView).bind("mouseenter",this,this._mouseMovedIntoImmersiveView);
}if(window.addEventListener){window.addEventListener("orientationchange",function(){window.scrollTo(0,0);
},false);
}};
ImmersiveView.prototype.updateImageWithAssociatedReview=function(reviewData,imageURL,imagesInThisReview,disableVotingButtons){this._updateReviewInformation(reviewData,disableVotingButtons);
this._updateImageViewWithImage(imageURL);
this._updateRelatedReviewImages(imagesInThisReview);
};
ImmersiveView.prototype.updateImageWithAssociatedLegacyImageInfo=function(legacyImageData,imageURL){this._updateLegacyImageData(legacyImageData);
this._updateImageViewWithImage(imageURL);
};
ImmersiveView.prototype._updateImageViewWithImage=function(imageURL){var imageElement=this.viewDom.find(".imageElement");
imageElement.attr("src",imageURL);
};
ImmersiveView.prototype._updateRelatedReviewImages=function(images){var myself=this;
var relatedImagesContainer=this.viewDom.find(".thumbnails");
relatedImagesContainer.html("");
A.$.each(images,function(index,image){var templateData={url:image.thumbnail};
var thumbnail=A.$(myself._globalModel.replaceStringPlaceholders(myself._thumbnailTemplate,templateData));
if(image.shouldHighlight){thumbnail.addClass("imageHighlight");
thumbnail.attr("offset",thumbnail.index);
}else{A.$(thumbnail).bind("click",function(){A.$(myself).trigger("moveToImageAtOffset",image.index);
});
}relatedImagesContainer.append(thumbnail);
});
};
ImmersiveView.prototype._updateReviewInformation=function(reviewData,disableVotingButtons){if(this._isImageInformationPanelExpanded){this._collapseImageInformationPanel();
}var templateData={rating:reviewData.overallRating,authorName:reviewData.author.displayName,reviewTitle:reviewData.title,reviewText:reviewData.text,date:this._getStringFromEpochTime(reviewData.submissionDateMs),helpfulCount:reviewData.scores.helpfulVotes,notHelpfulCount:parseInt(reviewData.scores.totalVotes)-parseInt(reviewData.scores.helpfulVotes),productTitle:reviewData.productTitle,customerID:reviewData.author.customerId};
var templateToRender=(this._templateStyle==="DESKTOP")?"reviewDisplayComp":"reviewMobileDisplayComp";
var imageInformationRenderedTemplate=A.$(this._globalModel.replaceStringPlaceholders(this._globalModel.getTemplate(templateToRender),templateData));
var imageInformationDom=this.viewDom.find(".imageInformation");
var sectionHeader=imageInformationRenderedTemplate.find(".section-header");
A.$(sectionHeader).bind("click",this,this._imageInformationHeaderClicked);
var helpfulVoteButton=imageInformationRenderedTemplate.find(".helpful_vote_button");
var notHelpfulVoteButton=imageInformationRenderedTemplate.find(".not_helpful_vote_button");
A.$(helpfulVoteButton).bind("click",this,this._helpfulButtonClicked);
A.$(notHelpfulVoteButton).bind("click",this,this._notHelpfulButtonClicked);
if(disableVotingButtons){imageInformationRenderedTemplate.find(".votingStripe").addClass("hidden");
}if(this._templateStyle==="MOBILE"){var imageInformationContainerDom=this.viewDom.find(".imageInformationContainer");
imageInformationContainerDom.css({"margin-top":"-78px"});
}imageInformationDom.html(imageInformationRenderedTemplate);
};
ImmersiveView.prototype._updateLegacyImageData=function(legacyImageData){if(this._isImageInformationPanelExpanded){this._collapseImageInformationPanel();
}var templateData={authorName:legacyImageData.authorName,caption:legacyImageData.caption,date:this._getStringFromEpochTime(legacyImageData.submissionDateMs),productTitle:legacyImageData.productTitle,customerID:legacyImageData.customerID};
var templateToRender=(this._templateStyle==="DESKTOP")?"legacyImageInfoDisplayComp":"legacyImageInfoDisplayCompForMobile";
var imageInformationRenderedTemplate=A.$(this._globalModel.replaceStringPlaceholders(this._globalModel.getTemplate(templateToRender),templateData));
var imageInformationDom=this.viewDom.find(".imageInformation");
if(this._templateStyle==="MOBILE"){if(!legacyImageData.caption){var imageInformationContainerDom=this.viewDom.find(".imageInformationContainer");
imageInformationRenderedTemplate.find(".informationPanelExpandButton").addClass("hidden");
imageInformationContainerDom.css({"margin-top":"-58px"});
}else{var imageInformationContainerDom=this.viewDom.find(".imageInformationContainer");
var informationPanelHeader=imageInformationRenderedTemplate.find(".section-header");
A.$(informationPanelHeader).bind("click",this,this._imageInformationHeaderClicked);
imageInformationContainerDom.css({"margin-top":"-78px"});
}}imageInformationDom.html(imageInformationRenderedTemplate);
};
ImmersiveView.prototype._getStringFromEpochTime=function(epochTime){try{var date=new Date(parseInt(epochTime));
var dateAsString=date.toString().split(" ");
var formattedDate=dateAsString[1]+" "+dateAsString[2]+", "+dateAsString[3];
}catch(e){return"";
}return formattedDate;
};
ImmersiveView.prototype._imageInformationHeaderClicked=function(event){var myself=event.data;
if(!myself._isImageInformationPanelExpanded){myself._expandImageInformationPanel();
}else{myself._collapseImageInformationPanel();
}};
ImmersiveView.prototype._expandImageInformationPanel=function(event){this._isImageInformationPanelExpanded=true;
this.viewDom.find(".imageInformationContainer").css({"-webkit-transform":"translate(0px,-300px)","transition":"1s ease-in-out"});
var informationPanelExpandButton=this.viewDom.find(".informationPanelExpandButton");
informationPanelExpandButton.css({"transform":"rotate(180deg) scale(0.75)","-webkit-transform":"rotate(180deg) scale(0.75)"});
var imageElement=this.viewDom.find(".imageElement");
imageElement.css({"-webkit-transform":"scale(1) translate(0px,-50%)","transition":"1s ease-in-out","opacity":0.75});
};
ImmersiveView.prototype._collapseImageInformationPanel=function(event){this._isImageInformationPanelExpanded=false;
this.viewDom.find(".imageInformationContainer").css({"-webkit-transform":"translate(0px,0px)","transition":"1s ease-in-out"});
var informationPanelExpandButton=this.viewDom.find(".informationPanelExpandButton");
informationPanelExpandButton.css({"transform":"rotate(0deg) scale(0.75)","-webkit-transform":"rotate(0deg) scale(0.75)"});
var imageElement=this.viewDom.find(".imageElement");
imageElement.css({"-webkit-transform":"scale(1) translate(0px,0px)","transition":"1s ease-in-out","opacity":1});
};
ImmersiveView.prototype._mouseMovedOutOfImmersiveView=function(event){var myself=event.data;
var backButton=myself.viewDom.find(".back-button");
var nextButton=myself.viewDom.find(".next-button");
backButton.animate({opacity:0},100);
nextButton.animate({opacity:0},100);
};
ImmersiveView.prototype._mouseMovedIntoImmersiveView=function(event){var myself=event.data;
var backButton=myself.viewDom.find(".back-button");
var nextButton=myself.viewDom.find(".next-button");
backButton.animate({opacity:0.25},100);
nextButton.animate({opacity:0.25},100);
};
ImmersiveView.prototype._helpfulButtonClicked=function(event){var myself=event.data;
A.$(myself).trigger("castHelpfulVote");
};
ImmersiveView.prototype._notHelpfulButtonClicked=function(event){var myself=event.data;
A.$(myself).trigger("castNotHelpfulVote");
};
ImmersiveView.prototype.showBackButton=function(){var backButton=this.viewDom.find(".back-button");
var backButtonContainer=this.viewDom.find(".backButtonContainer");
backButtonContainer.css({"cursor":"pointer"});
backButton.show();
};
ImmersiveView.prototype.hideBackButton=function(){var backButton=this.viewDom.find(".back-button");
var backButtonContainer=this.viewDom.find(".backButtonContainer");
backButtonContainer.css({"cursor":"auto"});
backButton.hide();
};
ImmersiveView.prototype.showNextButton=function(){var nextButton=this.viewDom.find(".next-button");
var nextButtonContainer=this.viewDom.find(".nextButtonContainer");
nextButtonContainer.css({"cursor":"pointer"});
nextButton.show();
};
ImmersiveView.prototype.hideNextButton=function(){var nextButton=this.viewDom.find(".next-button");
var nextButtonContainer=this.viewDom.find(".nextButtonContainer");
nextButtonContainer.css({"cursor":"auto"});
nextButton.hide();
};
ImmersiveView.prototype.showVotingButtons=function(){var votingButtons=this.viewDom.find(".votingButtons");
votingButtons.show();
};
ImmersiveView.prototype.hideVotingButtons=function(){var votingButtons=this.viewDom.find(".votingButtons");
votingButtons.hide();
};
ImmersiveView.prototype.showMessageForSuccessfulVoteCast=function(){var successfulVoteCastAlert=this.viewDom.find(".votingSuccessAlert");
successfulVoteCastAlert.show();
};
ImmersiveView.prototype.showMessageForErrorDuringVoteCast=function(){var failedVoteCastAlert=this.viewDom.find(".votingErrorAlert");
failedVoteCastAlert.show();
};
ImmersiveView.prototype.showMessageForVoteInProcess=function(){var votingWaitMessage=this.viewDom.find(".votingWaitMessage");
votingWaitMessage.show();
};
ImmersiveView.prototype.hideMessageForVoteInProcess=function(){var votingWaitMessage=this.viewDom.find(".votingWaitMessage");
votingWaitMessage.hide();
};
CompositeThumbnailViewController=function CompositeThumbnailViewController(parentViewDom,applicationModel){this._viewContainerDom=parentViewDom;
this._applicationModel=applicationModel;
this.tiles=[];
this._lastSavedScrollPosition=0;
};
CompositeThumbnailViewController.prototype.addThumbnailsForImages=function(images){var myself=this;
A.$.each(images,function(index,image){var index=myself.tiles.length;
var previewTile=new ThumbnailPreviewTile(index,image.smallImage,64);
A.$(previewTile.viewDom).bind("click",function(){A.$(myself).trigger("thumbnailClicked",index);
});
myself.tiles.push(previewTile);
myself._viewContainerDom.append(previewTile.viewDom);
previewTile.makeVisible();
});
};
CompositeThumbnailViewController.prototype.hide=function(){this._viewContainerDom.hide();
};
CompositeThumbnailViewController.prototype.show=function(){this._viewContainerDom.show();
};
CompositeThumbnailViewController=function CompositeThumbnailViewController(parentViewDom,applicationModel){this._viewContainerDom=parentViewDom;
this._applicationModel=applicationModel;
this.tiles=[];
this._lastSavedScrollPosition=0;
};
CompositeThumbnailViewController.prototype.addThumbnailsForImages=function(images){var myself=this;
A.$.each(images,function(index,image){var index=myself.tiles.length;
var previewTile=new ThumbnailPreviewTile(index,image.smallImage,64);
A.$(previewTile.viewDom).bind("click",function(){A.$(myself).trigger("thumbnailClicked",index);
});
myself.tiles.push(previewTile);
myself._viewContainerDom.append(previewTile.viewDom);
previewTile.makeVisible();
});
};
CompositeThumbnailViewController.prototype.hide=function(){this._viewContainerDom.hide();
};
CompositeThumbnailViewController.prototype.show=function(){this._viewContainerDom.show();
};
ThumbnailPreviewTile=function(index,url){this.index=index;
this.url=url;
this.viewDom=undefined;
this.isVisible=false;
this._renderTemplate();
};
ThumbnailPreviewTile.prototype._renderTemplate=function(){this.viewDom=A.$(this._thumbnailTemplate);
};
ThumbnailPreviewTile.prototype.makeVisible=function(){if(!this.isVisible){this.isVisible=true;
this.viewDom.css({"background-image":'url("'+this.url+'")'});
}};
GalleryDataFetcher=function(applicationModel){this.applicationModel=applicationModel;
this.fetchedAllData=false;
this.nextPageToken=undefined;
A.$(this).bind("fetchReviewsDataSuccess",this,this._fetchReviewsDataSuccess);
A.$(this).bind("fetchReviewsDataError",this,this._fetchReviewsDataError);
};
GalleryDataFetcher.prototype.startFetchingData=function(){var data={};
if(this.applicationModel.asin){data["asin"]=this.applicationModel.asin;
new AjaxRequest("/gp/customer-reviews/aj/private/reviewsGallery/get-data-for-reviews-image-gallery-for-asin",data,this,"fetchReviewsData",5000,3);
}else{if(this.applicationModel.reviewID){data["reviewID"]=this.applicationModel.reviewID;
new AjaxRequest("/gp/customer-reviews/aj/private/reviewsGallery/get-data-for-reviews-image-gallery-for-review",data,this,"fetchReviewsData",5000,3);
}else{if(this.applicationModel.customerID){data["customerID"]=this.applicationModel.customerID;
new AjaxRequest("/gp/customer-reviews/aj/private/customerProfile/get-data-for-image-gallery-for-customer-profile",data,this,"fetchReviewsData",5000,3);
}else{return;
}}}};
GalleryDataFetcher.prototype._fetchReviewsDataSuccess=function(event,data){var myself=event.data;
for(var index=0;
index<data.images.length;
index++){myself.applicationModel.imageData.push(data.images[index]);
}A.$(myself).trigger("dataFetchCallback",data);
if(data.nextPageToken&&JSON){var requestData={};
if(myself.applicationModel.asin){requestData["asin"]=myself.applicationModel.asin;
requestData["nextPageToken"]=JSON.stringify(data.nextPageToken);
new AjaxRequest("/gp/customer-reviews/aj/private/reviewsGallery/get-data-for-reviews-image-gallery-for-asin",requestData,this,"fetchReviewsData",5000,3);
}else{if(myself.applicationModel.customerID){requestData["customerID"]=myself.applicationModel.customerID;
requestData["nextPageToken"]=JSON.stringify(data.nextPageToken);
new AjaxRequest("/gp/customer-reviews/aj/private/customerProfile/get-data-for-image-gallery-for-customer-profile",requestData,this,"fetchReviewsData",5000,3);
}}}else{A.$(myself).trigger("dataFetchCompleteCallback");
}};
GalleryDataFetcher.prototype._fetchReviewsDataError=function(event,data){};
LogMetricsRequest=function(metricsHash){new AjaxRequestNoReply("/gp/customer-reviews/aj/metrics/log-values",metricsHash);
};
AjaxRequest=function(url,params,publisher,triggerName,timeout,retryCount){timeout=timeout?timeout:4000;
var retryLimit=retryCount?retryCount:0;
if(!params){params={};
}params.noCache=(new Date()).getTime();
A.$.ajax({type:"POST",url:url,data:params,timeout:timeout,tryCount:0,retryLimit:retryLimit,success:function(data){if(data instanceof Array){data={"elements":data};
}A.$(publisher).trigger(triggerName+"Success",data);
A.$(publisher).trigger(triggerName+"Done",arguments);
},error:function(errorXHR,errorStatus,errorThrown){this.tryCount++;
if(this.tryCount<=this.retryLimit){A.$.ajax(this);
return;
}A.$(publisher).trigger(triggerName+"Error",{errorXHR:errorXHR,errorStatus:errorStatus,errorThrown:errorThrown});
A.$(publisher).trigger(triggerName+"Done",arguments);
}});
};
AjaxRequestNoReply=function(url,params){url+="?noCache="+(new Date()).getTime()+"&";
for(var paramName in params){url+=paramName+"="+params[paramName]+"&";
}if(window.Image){new Image().src=url;
}};
ReviewGallery.prototype._applicationViewTemplate=' <div class="immersiveViewContainer" style="width:100%;height:100%;position:absolute;top:0;z-index:999;">';
ReviewsLightbox.prototype._applicationViewTemplate=' <div class="noCustomerImagesBanner" style="display:none;color:rgb(94,94,94);"> <b><span class="noCustomerImagesText"></span></b> </div> <div class="large-loadingIcon loadingSection"> </div> <div class="compositeThumbnailContentView" style="width:100%;height;100%;background:white;height:100%;overflow-y:auto;-webkit-overflow-scrolling: touch;"> </div> <div class="immersiveViewContainer" style="width:100%;height:100%;position:absolute;display:none;top:0;z-index:999;"> </div> ';
ImmersiveView.prototype._immersiveView=' <div class="immersiveView" style="width:100%;height:100%;overflow:hidden;"> <div class="hideButton" style="cursor:pointer;display:inline-block;max-height:30px;overflow:hidden;position:absolute"> <div class="gallery-icon"> </div> <span style="text-align:center; margin:auto; font-weight:bold;">{{ hideButtonText }}</span> </div> <div class="immersiveViewMainContent" style="height:100%;padding-top:30px;"> <div class="imageInformation" style="width:310px;height:100%;background-color:white;float:right;padding-left:18px;overflow-y:scroll;overflow-x:hidden;margin-top:-4px;"> </div> <div class="imageViewContainer" style="height:100%;position:relative;margin-right:310px;background: black;"> <div class="imageView" style="position:absolute;top:0;left:0;width:100%;height:100%;"> <div style="position:relative;width:100%;height:100%;"> <img class="imageElement" src=""> </div> </div> <div class="backButtonContainer"> <div class="back-button"> </div> </div> <div class="nextButtonContainer"> <div class="next-button"> </div> </div> </div> </div>';
ImmersiveView.prototype._thumbnailTemplate=' <div class="thumnail" style="background-image:url({{ url }}); width:48px;height:48px; background-position: center center; background-repeat: no-repeat; overflow: hidden; background-size: cover;cursor: pointer;display: inline-block;margin-left: 5px;"> </div> ';
ImmersiveView.prototype._immersiveViewForMobile=' <div class="immersiveView" style="width:100%;height:100%;position:relative;background-color: rgb(0, 0, 0);overflow:hidden;"> <div class="hideButton hideButton-mobile"> <span style="text-align:center; margin: auto;font-weight:bold;">{{ hideButtonText }}</span> </div> <div class="imageViewContainer" style="width:100%;float:left;height:100%;position:relative;"> <div class="imageView" style="position:absolute;top:0;left:0;width:100%;height:100%;"> <div style="position:relative;width:100%;height:100%;"> <img class="imageElement" src="" style="position:absolute;top:0;bottom:0;left:0;right:0;margin:auto;max-width:100%;max-height:100%;"> </div> </div> <div class="backButtonContainer"> <div class="back-button back-button-mobile"> </div> </div> <div class="nextButtonContainer"> <div class="next-button next-button-mobile"> </div> </div> </div> <div class="imageInformationContainer" style="width:100%;height:400px;background-color:transparent;float:left;margin-top:-78px;"> <div class="imageInformation imageInformationMobile" style="width:100%;height:100%;position:relative;"> </div> </div>';
ThumbnailPreviewTile.prototype._thumbnailTemplate=' <div class="thumbnailPreviewTile"> </div> ';
if(!window.reviewsLightboxGlobalModel){var model=new ReviewsLightboxGlobalModel();
try{P.when("reviewsLightbox-globalModel").register("reviewsLightbox-js",function(){window.reviewsLightboxGlobalModel=model;
return{};
});
}catch(e){}}});
}else{}});
